{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83e\udd0f\ud83c\udffb investpy but made tiny Suuuuuuuper simple and tiny investpy replacement while I try to fix it! Here I'll try to add more or less the same functionality that was developed for investpy while keeping this package tiny and up-to-date, as some solutions just work temporarily. Everyone using investiny please go thank @ramakrishnamekala129 for proposing this solution that seems to be stable and working fine so far (fingers crossed!). Remember that investiny shouldn't be considered reliable, as even though it's working fine, it may be discontinued, so please use it mindfully.","title":"Home"},{"location":"#investpy-but-made-tiny","text":"Suuuuuuuper simple and tiny investpy replacement while I try to fix it! Here I'll try to add more or less the same functionality that was developed for investpy while keeping this package tiny and up-to-date, as some solutions just work temporarily. Everyone using investiny please go thank @ramakrishnamekala129 for proposing this solution that seems to be stable and working fine so far (fingers crossed!). Remember that investiny shouldn't be considered reliable, as even though it's working fine, it may be discontinued, so please use it mindfully.","title":"\ud83e\udd0f\ud83c\udffb investpy but made tiny"},{"location":"differences-with-investpy/","text":"\ud83e\udd14 What are the differences with investpy ? investiny is faster, lighter and easier to use , but with reduced functionality for the moment. investiny lets you retrieve historical data from Investing.com through historical_data and search any available asset through search_assets , while investpy offers more functions to also retrieve technical indicators, economic calendars, dividends, etc. but those will come at some point to investiny too. \u2728 investiny introduces intraday data, so the specified intervals when retrieving historical data for any asset available at Investing.com goes from 1 minute to monthly data. investpy uses Investing.com's APIs at https://www.investing.com/instruments/HistoricalDataAjax and at https://api.investing.com/api/financialdata/historical, that are Cloudflare protected and not working any more, as you'll end up getting blocked with 403 Forbidden HTTP code; while investiny is using https://tvc4.investing.com/, which seems to be more reliable right now according to the ran tests, as well as providing intraday data.","title":"Differences with investpy"},{"location":"differences-with-investpy/#what-are-the-differences-with-investpy","text":"investiny is faster, lighter and easier to use , but with reduced functionality for the moment. investiny lets you retrieve historical data from Investing.com through historical_data and search any available asset through search_assets , while investpy offers more functions to also retrieve technical indicators, economic calendars, dividends, etc. but those will come at some point to investiny too. \u2728 investiny introduces intraday data, so the specified intervals when retrieving historical data for any asset available at Investing.com goes from 1 minute to monthly data. investpy uses Investing.com's APIs at https://www.investing.com/instruments/HistoricalDataAjax and at https://api.investing.com/api/financialdata/historical, that are Cloudflare protected and not working any more, as you'll end up getting blocked with 403 Forbidden HTTP code; while investiny is using https://tvc4.investing.com/, which seems to be more reliable right now according to the ran tests, as well as providing intraday data.","title":"\ud83e\udd14 What are the differences with investpy?"},{"location":"disclaimer/","text":"\u26a0\ufe0f Disclaimer Investing.com is a registered trademark from Investing.com, and their services offered by Fusion Media Limited. Neither investpy nor investiny are affiliated, endorsed, or vetted by Investing.com. Both investpy and investiny are open source packages that use Investing.com's available data, intended for research and educational purposes only. You should refer to Investing.com's terms and conditions at https://www.investing.com/about-us/terms-and-conditions for details on your rights to use the actual data, as it is intended for personal use only.","title":"Disclaimer"},{"location":"disclaimer/#disclaimer","text":"Investing.com is a registered trademark from Investing.com, and their services offered by Fusion Media Limited. Neither investpy nor investiny are affiliated, endorsed, or vetted by Investing.com. Both investpy and investiny are open source packages that use Investing.com's available data, intended for research and educational purposes only. You should refer to Investing.com's terms and conditions at https://www.investing.com/about-us/terms-and-conditions for details on your rights to use the actual data, as it is intended for personal use only.","title":"\u26a0\ufe0f Disclaimer"},{"location":"installation/","text":"\ud83d\udee0\ufe0f Installation $ pip install investiny","title":"Installation"},{"location":"installation/#installation","text":"$ pip install investiny","title":"\ud83d\udee0\ufe0f Installation"},{"location":"integrations/","text":"\ud83e\udd1d\ud83c\udffb Integrations Here we'll explain how to integrate investiny with other packages/libraries. \ud83d\udc3c Pandas You'll need to install pandas as pip install pandas , and then in case you want to mimic investpy 's output for historical data retrieval functions, you'll need to run the following code: from investiny import historical_data import pandas as pd output = historical_data ( investing_id = 6408 ) data = pd . DataFrame . from_dict ( output ) data . rename ( columns = { \"date\" : \"Date\" , \"open\" : \"Open\" , \"high\" : \"High\" , \"low\" : \"Low\" , \"close\" : \"Close\" , \"volume\" : \"Volume\" }, inplace = True ) data . set_index ( \"Date\" , inplace = True ) \u2795 More to come... Feel free to submit a PR to update the documenation by adding more integrations with any other package/library that you think can be useful to be documented.","title":"Integrations"},{"location":"integrations/#integrations","text":"Here we'll explain how to integrate investiny with other packages/libraries.","title":"\ud83e\udd1d\ud83c\udffb Integrations"},{"location":"integrations/#pandas","text":"You'll need to install pandas as pip install pandas , and then in case you want to mimic investpy 's output for historical data retrieval functions, you'll need to run the following code: from investiny import historical_data import pandas as pd output = historical_data ( investing_id = 6408 ) data = pd . DataFrame . from_dict ( output ) data . rename ( columns = { \"date\" : \"Date\" , \"open\" : \"Open\" , \"high\" : \"High\" , \"low\" : \"Low\" , \"close\" : \"Close\" , \"volume\" : \"Volume\" }, inplace = True ) data . set_index ( \"Date\" , inplace = True )","title":"\ud83d\udc3c Pandas"},{"location":"integrations/#more-to-come","text":"Feel free to submit a PR to update the documenation by adding more integrations with any other package/library that you think can be useful to be documented.","title":"\u2795 More to come..."},{"location":"license/","text":"\ud83d\udcdd License MIT License Copyright (c) 2022 Alvaro Bartolome Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright (c) 2022 Alvaro Bartolome Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"\ud83d\udcdd License"},{"location":"requirements/","text":"\ud83d\udcc3 Requirements Python 3.8+","title":"Requirements"},{"location":"requirements/#requirements","text":"Python 3.8+","title":"\ud83d\udcc3 Requirements"},{"location":"usage/","text":"\ud83d\udcbb Usage Retrieve historical data from Investing.com using the Investing.com ID of the asset that you want to retrieve the data from. from investiny import historical_data data = historical_data ( investing_id = 6408 , from_date = \"09/01/2022\" , to_date = \"10/01/2022\" ) # Returns AAPL historical data as JSON (without date) There's also a function to look for assets in Investing.com, that also lets you retrieve the Investing.com ID that you can later on use in historical_data as input parameter. from investiny import search_assets results = search_assets ( query = \"AAPL\" , limit = 1 , type = \"Stock\" , exchange = \"NASDAQ\" ) # Returns a list with all the results found in Investing.com As search_assets returns a list of results, you can check each of them, and retrieve the ticker from the asset that you want to retrieve historical data from and pass it as parameter to historical_data . So on, the combination of both functions should look like the following: from investiny import historical_data , search_assets search_results = search_assets ( query = \"AAPL\" , limit = 1 , type = \"Stock\" , exchange = \"NASDAQ\" ) investing_id = int ( search_results [ 0 ][ \"ticker\" ]) # Assuming the first entry is the desired one (top result in Investing.com) data = historical_data ( investing_id = investing_id , from_date = \"09/01/2022\" , to_date = \"10/01/2022\" )","title":"Usage"},{"location":"usage/#usage","text":"Retrieve historical data from Investing.com using the Investing.com ID of the asset that you want to retrieve the data from. from investiny import historical_data data = historical_data ( investing_id = 6408 , from_date = \"09/01/2022\" , to_date = \"10/01/2022\" ) # Returns AAPL historical data as JSON (without date) There's also a function to look for assets in Investing.com, that also lets you retrieve the Investing.com ID that you can later on use in historical_data as input parameter. from investiny import search_assets results = search_assets ( query = \"AAPL\" , limit = 1 , type = \"Stock\" , exchange = \"NASDAQ\" ) # Returns a list with all the results found in Investing.com As search_assets returns a list of results, you can check each of them, and retrieve the ticker from the asset that you want to retrieve historical data from and pass it as parameter to historical_data . So on, the combination of both functions should look like the following: from investiny import historical_data , search_assets search_results = search_assets ( query = \"AAPL\" , limit = 1 , type = \"Stock\" , exchange = \"NASDAQ\" ) investing_id = int ( search_results [ 0 ][ \"ticker\" ]) # Assuming the first entry is the desired one (top result in Investing.com) data = historical_data ( investing_id = investing_id , from_date = \"09/01/2022\" , to_date = \"10/01/2022\" )","title":"\ud83d\udcbb Usage"},{"location":"api/historical/","text":"Get historical data from Investing.com. Parameters: Name Type Description Default investing_id int Investing.com's ID for the asset. required from_date Union [ str , None] Initial date to retrieve historical data (formatted as m/d/Y). Defaults to None. None to_date Union [ str , None] Final date to retrieve historical data (formatted as m/d/Y). Defaults to None. None interval Literal [1, 5, 15, 30, 45, 60, 120, 240, 300, 'D', 'W', 'M'] Interval between each historical data point. Defaults to \"D\". 'D' Note If no dates are introduced, the function will retrieve the last 30 days of historical data. Returns: Type Description Dict [ str , Any ] Dict[str, Any]: A dictionary with the historical data. Source code in investiny/historical.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def historical_data ( investing_id : int , from_date : Union [ str , None ] = None , to_date : Union [ str , None ] = None , interval : Literal [ 1 , 5 , 15 , 30 , 45 , 60 , 120 , 240 , 300 , \"D\" , \"W\" , \"M\" ] = \"D\" , ) -> Dict [ str , Any ]: \"\"\"Get historical data from Investing.com. Args: investing_id (int): Investing.com's ID for the asset. from_date (Union[str, None], optional): Initial date to retrieve historical data (formatted as m/d/Y). Defaults to None. to_date (Union[str, None], optional): Final date to retrieve historical data (formatted as m/d/Y). Defaults to None. interval (Literal[1, 5, 15, 30, 45, 60, 120, 240, 300, \"D\", \"W\", \"M\"], optional): Interval between each historical data point. Defaults to \"D\". Note: If no dates are introduced, the function will retrieve the last 30 days of historical data. Returns: Dict[str, Any]: A dictionary with the historical data. \"\"\" if from_date and to_date : from_datetime = datetime . strptime ( from_date , \"%m/ %d /%Y\" ) to_datetime = datetime . strptime ( to_date , \"%m/ %d /%Y\" ) else : to_datetime = datetime . now () from_datetime = to_datetime - timedelta ( days = 30 ) params = { \"symbol\" : investing_id , \"from\" : int ( from_datetime . timestamp ()), \"to\" : int ( to_datetime . timestamp ()), \"resolution\" : interval , } data = request_to_investing ( endpoint = \"history\" , params = params ) time_format = \"%H:%M %m/ %d /%Y\" if isinstance ( interval , int ) else \"%m/ %d /%Y\" output = { \"date\" : [ datetime . fromtimestamp ( t ) . strftime ( time_format ) for t in data [ \"t\" ]], # type: ignore \"open\" : data [ \"o\" ], # type: ignore \"high\" : data [ \"h\" ], # type: ignore \"low\" : data [ \"l\" ], # type: ignore \"close\" : data [ \"c\" ], # type: ignore } if \"v\" in data : output [ \"volume\" ] = data [ \"v\" ] # type: ignore return output","title":"Historical"},{"location":"api/search/","text":"Search any available asset at Investing.com. Parameters: Name Type Description Default query str Query to search for. required limit int Maximum number of results to retrieve. Defaults to 10. 10 type Union [ Literal ['Stock', 'ETF', 'Commodity', 'Index', 'Future', 'Yield', 'FX'], None] Type of asset to search for. Defaults to None. None exchange Union [ str , None] Exchange to search for. Defaults to None. None Returns: Type Description List [ Dict [ str , Any ]] List[Dict[str, Any]]: A list of dictionaries with the search results. Source code in investiny/search.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def search_assets ( query : str , limit : int = 10 , type : Union [ Literal [ \"Stock\" , \"ETF\" , \"Commodity\" , \"Index\" , \"Future\" , \"Yield\" , \"FX\" , ], None , ] = None , exchange : Union [ str , None ] = None , ) -> List [ Dict [ str , Any ]]: \"\"\"Search any available asset at Investing.com. Args: query (str): Query to search for. limit (int, optional): Maximum number of results to retrieve. Defaults to 10. type (Union[Literal[\"Stock\", \"ETF\", \"Commodity\", \"Index\", \"Future\", \"Yield\", \"FX\"], None], optional): Type of asset to search for. Defaults to None. exchange (Union[str, None], optional): Exchange to search for. Defaults to None. Returns: List[Dict[str, Any]]: A list of dictionaries with the search results. \"\"\" params = { \"query\" : query , \"limit\" : limit , \"type\" : type if type else \"\" , \"exchange\" : exchange if exchange else \"\" , } return request_to_investing ( endpoint = \"search\" , params = params ) # type: ignore","title":"Search"}]}